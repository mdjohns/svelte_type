{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../DisplayWords.svelte",
    "../../Overlay.svelte",
    "../../TypingTest.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let words;\n</script>\n\n<style>\n  #words {\n    width: 400px;\n    overflow: hidden;\n    user-select: none;\n    -moz-user-select: none;\n    -wekbit-user-select: none;\n    border: 1px solid black;\n    border-radius: 4px;\n  }\n</style>\n\n<div id=\"words\">\n  {#each words as word}\n    <span>{word}</span>\n  {/each}\n</div>\n",
    "<script>\n  let timeLimit;\n  let styleToggle = \"\";\n  const toggleOverlay = () => {\n    if (styleToggle !== \"\") {\n      styleToggle = \"width: 0\";\n    }\n  };\n</script>\n\n<style>\n  .overlay {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    background-color: rgb(0, 0, 0);\n    background-color: rgba(0, 0, 0, 0.9);\n    overflow-x: hidden;\n    transition: 0.5s;\n  }\n\n  .overlay-content {\n    position: relative;\n    top: 25%;\n    width: 100%;\n    text-align: center;\n    margin-top: 30px;\n    color: #818181;\n  }\n\n  @media screen and (max-height: 450px) {\n    .overlay a {\n      font-size: 20px;\n    }\n    .overlay .closebtn {\n      font-size: 40px;\n      top: 15px;\n      right: 35px;\n    }\n  }\n</style>\n\n<div class=\"overlay\" style=\"styleToggle\">\n  <div class=\"overlay-content\">\n    <h1>Svelte Type</h1>\n    <label>\n      <input\n        type=\"number\"\n        bind:value={timeLimit}\n        min=\"1\"\n        max=\"5\"\n        placeholder=\"Time Limit (minutes)\" />\n    </label>\n    <button on:click={toggleOverlay}>Start</button>\n  </div>\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import Timer from \"./Timer.svelte\";\n  import Toggle from \"./Toggle.svelte\";\n  import Overlay from \"./Overlay.svelte\";\n  import DisplayWords from \"./DisplayWords.svelte\";\n  import words from \"./testApiData\";\n  let userInput = \"\";\n  let isActive = false;\n  const timeLimit = 90;\n\n  const numWords = 50;\n  const apiUrl = `https://random-word-api.herokuapp.com/word?number=${numWords}`;\n  //let words = [];\n\n  const toggle = () => {\n    isActive = !isActive;\n  };\n  // onMount(async () => {\n  //   const res = await fetch(apiUrl);\n  //   words = await res.json();\n  // });\n</script>\n\n<style>\n  #test {\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n</style>\n\n<div id=\"test\">\n  <h1>Typing Test</h1>\n  <Timer {timeLimit} {isActive} />\n  <DisplayWords {words} />\n  <input type=\"text\" id=\"user_input\" bind:value={userInput} />\n\n  {#if isActive === false}\n    <button on:click={toggle}>Start Test</button>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKE,MAAM,eAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,GAAG,AACpB,CAAC;ACFD,QAAQ,cAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,KAAK,CACf,OAAO,CAAE,CAAC,CACV,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,gBAAgB,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC9B,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,OAAO,MAAM,CAAC,GAAG,CAAC,aAAa,KAAK,CAAC,AAAC,CAAC,AASvC,CAAC;ACjBD,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,WAAW,CACpB,OAAO,CAAE,QAAQ,CACjB,OAAO,CAAE,WAAW,CACpB,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC"
}