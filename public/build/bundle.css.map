{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../DisplayWords.svelte",
    "../../Overlay.svelte",
    "../../TestForm.svelte",
    "../../TypingTest.svelte",
    "../../DisplayWords.svelte",
    "../../TestForm.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let words;\n  export let currentWord;\n</script>\n\n<style>\n  #words {\n    width: 200px;\n    height: 100px;\n    overflow: hidden;\n    user-select: none;\n    -moz-user-select: none;\n    -wekbit-user-select: none;\n    border: 1px solid black;\n    border-radius: 4px;\n  }\n\n  .word {\n    color: #000;\n    font-family: serif;\n  }\n  .active-word {\n    background: #dddddd;\n  }\n  .correct {\n    color: green;\n  }\n\n  .incorrect {\n    color: darkred;\n  }\n</style>\n\n<div id=\"words\">\n  {#each words as word, i}\n    <span class=\"word\">{word}</span>\n    <br />\n  {/each}\n</div>\n",
    "<script>\n  let timeLimit;\n  let styleToggle = \"\";\n  const toggleOverlay = () => {\n    if (styleToggle !== \"\") {\n      styleToggle = \"width: 0\";\n    }\n  };\n</script>\n\n<style>\n  .overlay {\n    height: 100%;\n    width: 100%;\n    position: fixed;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    background-color: rgb(0, 0, 0);\n    background-color: rgba(0, 0, 0, 0.9);\n    overflow-x: hidden;\n    transition: 0.5s;\n  }\n\n  .overlay-content {\n    position: relative;\n    top: 25%;\n    width: 100%;\n    text-align: center;\n    margin-top: 30px;\n    color: #818181;\n  }\n\n  @media screen and (max-height: 450px) {\n    .overlay a {\n      font-size: 20px;\n    }\n    .overlay .closebtn {\n      font-size: 40px;\n      top: 15px;\n      right: 35px;\n    }\n  }\n</style>\n\n<div class=\"overlay\" style=\"styleToggle\">\n  <div class=\"overlay-content\">\n    <h1>Svelte Type</h1>\n    <label>\n      <input\n        type=\"number\"\n        bind:value={timeLimit}\n        min=\"1\"\n        max=\"5\"\n        placeholder=\"Time Limit (minutes)\" />\n    </label>\n    <button on:click={toggleOverlay}>Start</button>\n  </div>\n</div>\n",
    "<script>\n  import DisplayWords from \"./DisplayWords.svelte\";\n  import { isActive } from \"./stores\";\n  export let words;\n  let userInput = \"\";\n  let currentWord;\n\n  const keyHandler = (e) => {\n    isActive.update((val) => (val = true));\n    if (e.key == \" \") {\n      userInput = \"\";\n    } else if (e.key == \"Enter\") {\n      //TODO: Skip word\n    }\n  };\n</script>\n\n<style>\n  #user_input {\n    width: 200px;\n  }\n</style>\n\n<DisplayWords {words} {currentWord} />\n\n<div>\n\n  <input\n    type=\"text\"\n    id=\"user_input\"\n    on:keydown={keyHandler}\n    bind:value={userInput}\n    autocomplete=\"false\"\n    data-lpignore=\"true\" />\n\n</div>\n{userInput}\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { isActive } from \"./utils/stores\";\n  import Timer from \"./Timer/Timer.svelte\";\n  import TestForm from \"./Words/TestForm.svelte\";\n\n  //TEST DATA\n  import words from \"./utils/testApiData\";\n\n  let isActive_value;\n  const unsubscribe = isActive.subscribe((val) => (isActive_value = val));\n  const timeLimit = 90;\n  const numWords = 50;\n  const apiUrl = `https://random-word-api.herokuapp.com/word?number=${numWords}`;\n  //let words = [];\n  let wordObjArr;\n  // onMount(async () => {\n  //   const res = await fetch(apiUrl);\n  //   words = await res.json();\n  // });\n\n  onMount(() => {\n    wordObjArr = words.map((word, i) => {\n      return {\n        word: word,\n        isCorrect: null,\n        isActive: false,\n      };\n    });\n    wordObjArr[0].isActive = true;\n  });\n</script>\n\n<style>\n  #test {\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n</style>\n\n<div id=\"test\">\n  <h1>Typing Test</h1>\n  <Timer {timeLimit} isActive={isActive_value} />\n  <TestForm words={wordObjArr} />\n\n  <div id=\"help_text\">\n    <p>\n      Press\n      <strong>Enter</strong>\n      to skip the current word.\n    </p>\n  </div>\n</div>\n",
    "<script>\n  export let words = [];\n  export let userInputProps;\n</script>\n\n<style>\n  #words {\n    width: 200px;\n    height: 100px;\n    overflow: hidden;\n    user-select: none;\n    -moz-user-select: none;\n    -wekbit-user-select: none;\n    border: 1px solid black;\n    border-radius: 4px;\n  }\n\n  .word {\n    color: #000;\n    font-family: serif;\n  }\n  .active-word {\n    background: #dddddd;\n  }\n  .correct {\n    color: green;\n  }\n\n  .incorrect {\n    color: darkred;\n  }\n</style>\n\n<div id=\"words\">\n  {#each words as word, i}\n    {#if words[i].isActive}\n      <span class=\"word active-word\">{word.word}</span>\n    {:else if words[i].isCorrect}\n      <span class=\"word correct\">{word.word}</span>\n    {:else if words[i].isCorrect === false}\n      <span class=\"word incorrect\">{word.word}</span>\n    {:else}\n      <span class=\"word\">{word.word}</span>\n    {/if}\n    <br />\n  {/each}\n</div>\n",
    "<script>\n  import { onMount, afterUpdate } from \"svelte\";\n  import DisplayWords from \"./DisplayWords.svelte\";\n  import { isActive } from \"../utils/stores\";\n  export let words;\n  let userInput = \"\";\n  let current = \"\";\n\n  let stats = {\n    numWords: 0,\n    correct: 0,\n  };\n\n  const startTimer = () => {\n    isActive.update((val) => (val = true));\n  };\n  const keyHandler = (e) => {\n    current = words[stats.numWords];\n    console.log(current);\n    if (e.key == \" \") {\n      e.preventDefault();\n      if (userInput === current.word) {\n        current.isCorrect = true;\n        stats.correct++;\n      } else {\n        current.isCorrect = false;\n      }\n      if (stats.numWords !== words.length) {\n        words[stats.numWords + 1].isActive = true;\n        //TODO: handle case where we run out of words before end of timer\n      }\n      stats.numWords++;\n      userInput = \"\";\n      current.isActive = false;\n    } else if (e.key == \"Enter\") {\n      e.preventDefault();\n      current.isActive = false;\n      current.isCorrect = false;\n      userInput = \"\";\n      stats.numWords++;\n      if (stats.numWords !== words.length) {\n        words[stats.numWords + 1].isActive = true;\n        //TODO: handle case where we run out of words before end of timer\n      }\n    }\n  };\n</script>\n\n<style>\n  #user_input {\n    width: 200px;\n  }\n</style>\n\n<DisplayWords {words} />\n\n<div>\n  <input\n    type=\"text\"\n    id=\"user_input\"\n    on:keydown|once={startTimer}\n    on:keydown={keyHandler}\n    bind:value={userInput}\n    autocomplete=\"false\"\n    data-lpignore=\"true\" />\n</div>\n"
  ],
  "names": [],
  "mappings": "AAME,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,KAAK,AACpB,CAAC;ACTD,QAAQ,cAAC,CAAC,AACR,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,KAAK,CACf,OAAO,CAAE,CAAC,CACV,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,gBAAgB,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC9B,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,OAAO,MAAM,CAAC,GAAG,CAAC,aAAa,KAAK,CAAC,AAAC,CAAC,AASvC,CAAC;ACxBD,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,KAAK,AACd,CAAC;ACcD,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,WAAW,CACpB,OAAO,CAAE,QAAQ,CACjB,OAAO,CAAE,WAAW,CACpB,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC;ACxCD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,aAAa,CAAE,GAAG,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,KAAK,AACpB,CAAC,AACD,YAAY,cAAC,CAAC,AACZ,UAAU,CAAE,OAAO,AACrB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,KAAK,AACd,CAAC,AAED,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,OAAO,AAChB,CAAC;ACmBD,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,KAAK,AACd,CAAC"
}