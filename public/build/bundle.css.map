{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Header.svelte",
    "../../DisplayWords.svelte",
    "../../TestForm.svelte",
    "../../Word.svelte",
    "../../Timer.svelte",
    "../../TypingTest.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n</script>\n\n<style>\n  header {\n    text-align: center;\n    text-transform: lowercase;\n    color: #d8dee9;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<header>\n  <h1>Typing Test</h1>\n</header>\n",
    "<script>\n  import Word from \"./Word.svelte\";\n  export let words = [];\n</script>\n\n<style>\n  #words {\n    width: 80vw;\n    height: 40vh;\n    overflow: hidden;\n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    font-size: x-large;\n  }\n</style>\n\n<div id=\"words\">\n  {#each words as word}\n    <Word {...word} />\n    <br />\n  {/each}\n</div>\n",
    "<script>\n  import { onMount, afterUpdate } from \"svelte\";\n  import DisplayWords from \"./DisplayWords.svelte\";\n\n  export let words;\n  export let isTimerActive;\n  export let gameStats;\n\n  let userInput = \"\";\n  let current = \"\";\n\n  const startTimer = () => {\n    isTimerActive = true;\n  };\n  const handleInput = (e) => {\n    current = words[gameStats.numWords];\n    console.log(userInput);\n    // Check current progress\n    if (userInput !== current.word.substr(0, userInput.length)) {\n      current.isCorrect = false;\n      words[gameStats.numWords] = { ...current };\n    }\n    // Reset correct-ness\n    else {\n      current.isCorrect = null;\n      words[gameStats.numWords] = { ...current };\n    }\n\n    //Submit word on \"space\"\n    if (e.key == \" \") {\n      e.preventDefault();\n      if (userInput === current.word) {\n        current.isCorrect = true;\n        gameStats.correctWords++;\n      } else {\n        current.isCorrect = false;\n      }\n      if (gameStats.numWords !== words.length) {\n        words[gameStats.numWords + 1].isActive = true;\n        //TODO: handle case where we run out of words before end of timer\n        //maybe check timer length and make additional fetch for more words?\n      }\n      current.isActive = false;\n      words[gameStats.numWords] = { ...current };\n      gameStats.numWords++;\n      userInput = \"\";\n    }\n    // Skip word on \"Enter\"\n    else if (e.key == \"Enter\") {\n      e.preventDefault();\n      current.isActive = false;\n      current.isCorrect = false;\n      words[gameStats.numWords] = { ...current };\n      userInput = \"\";\n      gameStats.numWords++;\n      if (gameStats.numWords !== words.length) {\n        words[gameStats.numWords].isActive = true;\n        //TODO: handle case where we run out of words before end of timer\n      }\n    }\n  };\n</script>\n\n<style>\n  .container {\n    background-color: #3b4252;\n    border-radius: 4px;\n  }\n  .typing-input {\n    background-color: #4c566a;\n    color: #eceff4;\n    font-family: monospace;\n    font-size: large;\n    width: 80vw;\n    border: none;\n  }\n</style>\n\n<div class=\"container\">\n  <DisplayWords {words} />\n\n  <input\n    class=\"typing-input\"\n    bind:value={userInput}\n    on:keydown|once={startTimer}\n    on:keydown={handleInput} />\n</div>\n",
    "<script>\n  import { afterUpdate, onMount } from \"svelte\";\n  export let word;\n  export let isCorrect;\n  export let isActive;\n\n  let wordElement;\n  afterUpdate(() => {\n    isActive ? wordElement.scrollIntoView(false) : \"\";\n  });\n</script>\n\n<style>\n  span {\n    color: #eceff4;\n    font-family: monospace;\n  }\n  .active {\n    color: #b48ead;\n    font-weight: bold;\n  }\n  .incorrect-active {\n    background: #bf616a;\n    color: white;\n  }\n  .incorrect {\n    color: #bf616a;\n  }\n  .correct {\n    color: #a3be8c;\n  }\n</style>\n\n<span\n  bind:this={wordElement}\n  class:active={isActive}\n  class:incorrect-active={isActive && isCorrect === false}\n  class:incorrect={!isActive && isCorrect === false}\n  class:correct={!isActive && isCorrect === true}>\n  {word}\n</span>\n",
    "<script>\n  import { onMount, onDestroy, afterUpdate } from \"svelte\";\n  import { tweened } from \"svelte/motion\";\n\n  export let timeLimit;\n  export let isTimerActive;\n  export let isTimerComplete;\n\n  // let isTimerActive;\n  // isActive.subscribe((val) => {\n  //   isTimerActive = val;\n  // });\n\n  let timer = tweened(timeLimit);\n  setInterval(() => {\n    if (isTimerActive) {\n      if ($timer > 0) $timer--;\n      else {\n        // isComplete.set(true);\n        // isActive.set(false);\n        isTimerActive = false;\n        isTimerComplete = true;\n      }\n    }\n  }, 1000);\n\n  $: minutes = Math.floor($timer / 60);\n  $: minname = minutes > 1 ? \"mins\" : \"min\";\n  $: seconds = Math.floor($timer - minutes * 60);\n</script>\n\n<style>\n  progress {\n    background-color: #3b4252;\n  }\n  progress::-webkit-progress-bar {\n    background-color: #3b4252;\n    border-radius: 7px;\n  }\n  progress::-webkit-progress-value {\n    background-color: #88c0d0;\n  }\n  progress::-moz-progress-bar {\n    background-color: #88c0d0;\n    /* style rules */\n  }\n</style>\n\n<progress value={$timer / timeLimit} />\n\n<div>\n  <span class=\"mins\">{minutes}</span>\n  {minname}\n  <span class=\"secs\">{seconds}</span> s\n</div>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import Timer from \"./Timer/Timer.svelte\";\n  import TestForm from \"./Test/TestForm.svelte\";\n  import Header from \"./Header/Header.svelte\";\n  import Results from \"../components/Test/Results.svelte\";\n  import * as Styles from \"../styles\";\n\n  const timeLimit = 30;\n  const numWords = 50;\n  const apiUrl = `https://random-word-api.herokuapp.com/word?number=${numWords}`;\n\n  //TEST DATA\n  import words from \"./utils/testApiData\";\n\n  //let words = [];\n  let wordObjArr;\n  let isTimerActive = false;\n  let isTimerComplete = false;\n  let gameStats = {\n    numWords: 0,\n    correctWords: 0,\n  };\n\n  // onMount(async () => {\n  //   const res = await fetch(apiUrl);\n  //   words = await res.json();\n  // });\n\n  onMount(() => {\n    //TODO: move this to async onMount with fetch\n    wordObjArr = words.map((word) => {\n      return {\n        word: word,\n        isCorrect: null,\n        isActive: false,\n      };\n    });\n    wordObjArr[0].isActive = true;\n  });\n</script>\n\n<style>\n  .flex-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    color: #eceff4;\n  }\n</style>\n\n<div class=\"flex-container\">\n  <Header />\n  {#if !isTimerComplete}\n    <section>\n      <Timer {timeLimit} bind:isTimerActive bind:isTimerComplete />\n      <TestForm\n        words={wordObjArr}\n        bind:isTimerActive\n        bind:isTimerComplete\n        bind:gameStats />\n    </section>\n\n    <section id=\"help-text\">\n      <span>Begin typing to start the test! </span>\n      <br />\n      <span>Press <strong>Enter</strong> to skip the current word. </span>\n    </section>\n  {/if}\n\n  {#if isTimerComplete}\n    <Results bind:gameStats {timeLimit} />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAKE,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,SAAS,CACzB,KAAK,CAAE,OAAO,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC;ACLD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,SAAS,CAAE,OAAO,AACpB,CAAC;ACkDD,UAAU,eAAC,CAAC,AACV,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,aAAa,eAAC,CAAC,AACb,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,SAAS,CACtB,SAAS,CAAE,KAAK,CAChB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC;AC9DD,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,SAAS,AACxB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,iBAAiB,eAAC,CAAC,AACjB,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,UAAU,eAAC,CAAC,AACV,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,OAAO,AAChB,CAAC;ACED,QAAQ,eAAC,CAAC,AACR,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AACD,uBAAQ,sBAAsB,AAAC,CAAC,AAC9B,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,uBAAQ,wBAAwB,AAAC,CAAC,AAChC,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AACD,uBAAQ,mBAAmB,AAAC,CAAC,AAC3B,gBAAgB,CAAE,OAAO,AAE3B,CAAC;ACFD,eAAe,eAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,AAChB,CAAC"
}